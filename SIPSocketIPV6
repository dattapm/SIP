#include<iostream>
using namespace std;

#include<errno.h>
#include<sys/socket.h>
#include<unistd.h>
#include <arpa/inet.h>
#include<string.h>

#define SERV_PORT 49101
#define LISTENQ 1024
#define MAXLINE 1024

#ifndef HAVE_BZERO
#define bzero(ptr, n) memset(ptr, 0, n)
#endif


int ReadFromSocket(int connfd) {
  //read from the socket.
  //
  char buf[MAXLINE];
  ssize_t n;
 
  while(true) {
    //std::cout<<"READING DATA FROM SOCKET"<<std::endl;	  
    n = read(connfd, buf, sizeof(buf));
    std::cout<<buf<<std::endl;
    //std::cout<<"READ"<<n<<" "<<"BYTES"<<std::endl;
    if((n < 0) && (errno != EINTR)){
	    return -1;
    }
  }

  return 0;
}

int main(int argc, char* argv[]) {

struct sockaddr_in servaddr, cliaddr;
int listenfd, connfd;
socklen_t clilen;

listenfd = socket(AF_INET, SOCK_STREAM, 0);
if(listenfd < 0){
   std::cout<<"SOCKET ERROR"<<std::endl;
   exit(1);
}

//std::cout<<"SOCKET CREATED"<<std::endl;
bzero(&servaddr, sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
servaddr.sin_port = htons(SERV_PORT);


if(bind(listenfd, (struct sockaddr*) &servaddr, sizeof(servaddr)) < 0){
   std::cout<<"UNABLE TO BIND THE SOCKET"<<std::endl;
}

//std::cout<<"BINDING TO SOCKET"<<std::endl;

if(listen(listenfd, LISTENQ) < 0) {
  std::cout<<"SOCKET UNABLE TO ACCEPT CONNECTIONS"<<std::endl;
}

//std::cout<<"LISTENING TO SOCKET"<<std::endl;

for(;;){
  clilen = sizeof(cliaddr);
  connfd = accept(listenfd, (struct sockaddr*) &cliaddr, &clilen); 
  if(connfd < 0) {
    std::cout<<"UNABLE TO CONNECT TO SOCKET"<<std::endl;
  }

  //std::cout<<"ACCEPTING A CONNECTION"<<std::endl;

  if(ReadFromSocket(connfd) < 0){
     std::cout<<"SOCKET READ ERROR"<<std::endl;
  }
  if(close(connfd) < 0) {
    std::cout<<"UNABLE TO CLOSE THE CONNECTION SOCKET"<<std::endl;
  }

}

if(close(listenfd) < 0) {
  std::cout<<"UNABLE TO CLOSE THE SOCKET"<<std::endl;
}

return 0;
}
